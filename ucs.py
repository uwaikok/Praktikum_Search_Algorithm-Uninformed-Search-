# -*- coding: utf-8 -*-
"""UCS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TC15Q56lZTHzQBOBPsVi2YuC2S3d4mH8
"""

import heapq

def uniform_cost_search(goal, start):
    global graph, cost
    answer = [10**8] * len(goal)

    # Priority queue (min-heap)
    queue = []
    heapq.heappush(queue, (0, start))  # (cost, node)

    visited = set()
    count = 0

    while queue:
        p_cost, p_node = heapq.heappop(queue)

        if p_node in goal:
            index = goal.index(p_node)
            if answer[index] == 10**8:
                count += 1
            answer[index] = min(answer[index], p_cost)
            if count == len(goal):
                return answer

        if p_node not in visited:
            visited.add(p_node)
            for neighbor in graph[p_node]:
                edge_cost = cost.get((p_node, neighbor), float('inf'))
                heapq.heappush(queue, (p_cost + edge_cost, neighbor))

    return answer

# Corrected the conditional statement to if __name__ == '__main__':
if __name__ == '__main__':
    # Create graph
    graph = [[] for _ in range(8)]
    cost = {}

    # Add edges
    graph[0].append(1)
    graph[0].append(3)
    graph[1].append(6)
    graph[3].append(1)
    graph[3].append(6)
    graph[3].append(4)
    graph[2].append(1)
    graph[4].append(2)
    graph[4].append(5)
    graph[4].append(6)
    graph[4].append(3)
    graph[5].append(2)
    graph[5].append(6)
    graph[6].append(4)

    # Add costs
    cost[(0, 1)] = 2
    cost[(0, 3)] = 5
    cost[(1, 6)] = 1
    cost[(3, 1)] = 5
    cost[(3, 6)] = 6
    cost[(3, 4)] = 2
    cost[(2, 1)] = 4
    cost[(4, 2)] = 3
    cost[(4, 5)] = 2
    cost[(4, 6)] = 6
    cost[(4, 3)] = 2
    cost[(5, 2)] = 6
    cost[(5, 6)] = 3
    cost[(6, 4)] = 7

    # Goal state
    goal = [6]

    # Get the answer
    answer = uniform_cost_search(goal, 0)

    # Print result
    print("Minimum cost from 0 to 6 is =", answer[0])